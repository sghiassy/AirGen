//
// APIHelpers.swift
//
// Generated by AirGen
// Mustache template author: Shaheen Ghiassy (shaheen@groupon.com)
//

//
//       ____  ____     _   ______  ______   __________  __________
//      / __ \/ __ \   / | / / __ \/_  __/  / ____/ __ \/  _/_  __/
//     / / / / / / /  /  |/ / / / / / /    / __/ / / / // /  / /
//    / /_/ / /_/ /  / /|  / /_/ / / /    / /___/ /_/ // /  / /
//   /_____/\____/  /_/ |_/\____/ /_/    /_____/_____/___/ /_/
//
//   THIS FILE WAS AUTO-GENERATED

import Foundation

enum AirGenDecodingError: Error {
    case unableToConvertToDestinationType
}

public extension Encodable {
    var asDictionary: [String: Any]? {
        guard let data = try? JSONEncoder().encode(self) else { return nil }
        return (try? JSONSerialization.jsonObject(with: data, options: .allowFragments)).flatMap { $0 as? [String: Any] }
    }

    var asStringDictionary: [String: String]? {
        return asDictionary?.mapValues({ (val) -> String in
            "\(val)"
        })
    }
}

internal extension KeyedDecodingContainer {
    func decodeFromString(_: String.Type, forKey key: K) throws -> String {
        return try decode(String.self, forKey: key)
    }

    func decodeFromString(_: Float.Type, forKey key: K) throws -> Float {
        let underlyingValue = try decode(String.self, forKey: key)
        guard let destinationValue = Float(underlyingValue) else {
            throw AirGenDecodingError.unableToConvertToDestinationType
        }
        return destinationValue
    }

    func decodeFromString(_: Int.Type, forKey key: K) throws -> Int {
        let underlyingValue = try decode(String.self, forKey: key)
        guard let destinationValue = Int(underlyingValue) else {
            throw AirGenDecodingError.unableToConvertToDestinationType
        }
        return destinationValue
    }

    func decodeFromString(_: Double.Type, forKey key: K) throws -> Double {
        let underlyingValue = try decode(String.self, forKey: key)
        guard let destinationValue = Double(underlyingValue) else {
            throw AirGenDecodingError.unableToConvertToDestinationType
        }
        return destinationValue
    }

    func decodeFromString(_: Bool.Type, forKey key: K) throws -> Bool {
        let underlyingValue = try decode(String.self, forKey: key)
        guard let destinationValue = underlyingValue.asBool else {
            throw AirGenDecodingError.unableToConvertToDestinationType
        }
        return destinationValue
    }
}

extension String {
    var asBool: Bool? {
        switch lowercased() {
        case "true":
            return true
        case "t":
            return true
        case "1":
            return true
        case "false":
            return false
        case "f":
            return false
        case "0":
            return false
        case "":
            return nil
        default:
            return nil
        }
    }
}