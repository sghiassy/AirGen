{{#operations}}
//
// {{classname}}Requests.swift
//
// Generated by AirGen
// Mustache template author: Shaheen Ghiassy (shaheen@groupon.com)
//

//
//       ____  ____     _   ______  ______   __________  __________
//      / __ \/ __ \   / | / / __ \/_  __/  / ____/ __ \/  _/_  __/
//     / / / / / / /  /  |/ / / / / / /    / __/ / / / // /  / /
//    / /_/ / /_/ /  / /|  / /_/ / / /    / /___/ /_/ // /  / /
//   /_____/\____/  /_/ |_/\____/ /_/    /_____/_____/___/ /_/
//
//   THIS FILE WAS AUTO-GENERATED

import AirGap

{{> RequestsBaseObjects}}

{{#operation}}
    /**
     {{#summary}}
     {{{summary}}}
     {{/summary}}{{#allParams}}
     - {{paramName}}: ({{#isFormParam}}form{{/isFormParam}}{{#isQueryParam}}query{{/isQueryParam}}{{#isPathParam}}path{{/isPathParam}}{{#isHeaderParam}}header{{/isHeaderParam}}{{#isBodyParam}}body{{/isBodyParam}}) {{{description}}} {{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}{{/allParams}}
     */
@objc(AG{{operationIdCamelCase}}Request)
public class {{operationIdCamelCase}}Request: NSObject, Codable {

    {{> RequestURL}}

    public static let verb: RequestType = .{{httpMethod}}
    public let url:  {{operationIdCamelCase}}Request.URL{{#hasHeaderParams}}
    public let headers: {{operationIdCamelCase}}Request.Headers{{/hasHeaderParams}}{{#hasBodyParam}}
    public let body: {{#bodyParam}}{{dataType}}{{/bodyParam}}{{/hasBodyParam}}

    public init(
        url: {{operationIdCamelCase}}Request.URL{{^hasParams}} = {{operationIdCamelCase}}Request.URL(){{/hasParams}}{{#hasHeaderParams}},
        headers: {{operationIdCamelCase}}Request.Headers{{/hasHeaderParams}}{{#hasBodyParam}},
        body: {{#bodyParam}}{{dataType}}{{/bodyParam}}{{/hasBodyParam}}) {
            self.url = url{{#hasHeaderParams}}
            self.headers = headers{{/hasHeaderParams}}{{#hasBodyParam}}
            self.body = body{{/hasBodyParam}}
        super.init()
    }

    var asData: Data { return try! JSONEncoder().encode(self) }// AirGen objects have guaranteed data consistency so we can assert this won't throw
    var asRawString: String { return String(data: self.asData, encoding: .utf8)! } // AirGen objects have guaranteed data consistency so we can assert this won't throw
}

{{> RequestParamsPath}}
{{> RequestParamsQuery}}
{{> RequestParamsHeader}}

/*
 *    ____     __               _
 *   / __/_ __/ /____ ___  ___ (_)__  ___  ___
 *  / _/ \ \ / __/ -_) _ \(_-</ / _ \/ _ \(_-<
 * /___//_\_\\__/\__/_//_/___/_/\___/_//_/___/
 */

public extension {{operationIdCamelCase}}Request.URL {
    public var absoluteStringURL: String { return AbsoluteStringURL(urlDefinition: {{operationIdCamelCase}}Request.URL.Definition, pathParams:{{#hasPathParams}}self.path.asStringDictionary{{/hasPathParams}}{{^hasPathParams}}nil{{/hasPathParams}}, queryParams:{{#hasQueryParams}}self.query.asStringDictionary{{/hasQueryParams}}{{^hasQueryParams}}nil{{/hasQueryParams}}) }
    public var absoluteURL: Foundation.URL { return Foundation.URL(string: self.absoluteStringURL)! } // Note: The URL explicit unwrap is safe here, since all objects are immutable and can't be allocated until the compiler ensures they meet the Swagger Spec
}

public extension {{operationIdCamelCase}}Request {
    var asAirGapRequest: Request {
        return Request({{operationIdCamelCase}}Request.verb,
                       self.url.absoluteStringURL{{#hasQueryParams}},
                       query: url.query.asStringDictionary{{/hasQueryParams}}{{#hasHeaderParams}},
                       headers: self.headers.asStringDictionary{{/hasHeaderParams}}{{#hasBodyParam}},
                       body: self.body.asDictionary{{/hasBodyParam}})
    }
}

{{/operation}}

{{/operations}}

