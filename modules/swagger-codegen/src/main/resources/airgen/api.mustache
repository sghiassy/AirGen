{{#operations}}
//
// {{classname}}Requests.swift
//
// Generated by AirGen
// Mustache template author: Shaheen Ghiassy (shaheen@groupon.com)
//

//
//       ____  ____     _   ______  ______   __________  __________
//      / __ \/ __ \   / | / / __ \/_  __/  / ____/ __ \/  _/_  __/
//     / / / / / / /  /  |/ / / / / / /    / __/ / / / // /  / /
//    / /_/ / /_/ /  / /|  / /_/ / / /    / /___/ /_/ // /  / /
//   /_____/\____/  /_/ |_/\____/ /_/    /_____/_____/___/ /_/
//
//   THIS FILE WAS AUTO-GENERATED

import AirGap

{{> RequestsBaseObjects}}

{{#operation}}
public class {{operationIdCamelCase}}Request: NSObject, Codable {

    {{> RequestURL}}

    public static let verb: RequestType = .{{httpMethod}}
    public let url:  {{operationIdCamelCase}}Request.URL{{#hasHeaderParams}}
    public let headers: {{operationIdCamelCase}}Request.Headers{{/hasHeaderParams}}{{#hasBodyParam}}
    public let body: {{#bodyParam}}{{dataType}}{{/bodyParam}}{{/hasBodyParam}}

    public init(
        url: {{operationIdCamelCase}}Request.URL{{^hasParams}} = {{operationIdCamelCase}}Request.URL(){{/hasParams}}{{#hasHeaderParams}},
        headers: {{operationIdCamelCase}}Request.Headers{{/hasHeaderParams}}{{#hasBodyParam}},
        body: {{#bodyParam}}{{dataType}}{{/bodyParam}}{{/hasBodyParam}}) {
            self.url = url{{#hasHeaderParams}}
            self.headers = headers{{/hasHeaderParams}}{{#hasBodyParam}}
            self.body = body{{/hasBodyParam}}
        super.init()
    }
}

{{> RequestParamsPath}}
{{> RequestParamsQuery}}
{{> RequestParamsHeader}}
{{/operation}}

fileprivate func urlString(from urlDefinition: String, pathParams: [String:String]?) -> String {
    guard let pathParams = pathParams else { return urlDefinition }

    var urlPathKeys: [String] = urlDefinition.split(separator: "/") // Split the URL by '/' slash token
                                             .map({ String($0) }) // Manually convert the StringSequence type returned by the split function to a regular String type
    urlPathKeys = urlPathKeys.map({ el in
        if el.first == ":" {
            return pathParams[String(el.dropFirst())]!
        } else {
            return el
        }
    })
    urlPathKeys[0] = urlPathKeys[0] + "/"
    return urlPathKeys.joined(separator: "/")
}


fileprivate func AbsoluteStringURL(urlDefinition: String, pathParams: [String:String]?, queryParams:[String:String]?) -> String {
    return urlString(from: urlDefinition, pathParams: pathParams) + queryString(from: queryParams)
}

fileprivate func AbsoluteURL(urlDefinition: String, pathParams: [String:String]?, queryParams:[String:String]?) -> URL {
    return URL(string: AbsoluteStringURL(urlDefinition: urlDefinition, pathParams: pathParams, queryParams: queryParams))!
}

public extension Encodable {
    var asDictionary: [String: Any]? {
        guard let data = try? JSONEncoder().encode(self) else { return nil }
        return (try? JSONSerialization.jsonObject(with: data, options: .allowFragments)).flatMap { $0 as? [String: Any] }
    }
    var asStringDictionary: [String:String]? {
        return self.asDictionary?.mapValues({ (val) -> String in
            return "\(val)"
        })
    }
}


{{/operations}}

