public struct URL: Codable {
    public let path: {{#hasPathParams}}{{operationIdCamelCase}}Request.URL.Path{{/hasPathParams}}{{^hasPathParams}}AirGenericPath{{/hasPathParams}}
    public let query: {{#hasQueryParams}}{{operationIdCamelCase}}Request.URL.Query{{/hasQueryParams}}{{^hasQueryParams}}AirGenericQuery{{/hasQueryParams}}

    public init(path: {{#hasPathParams}}{{operationIdCamelCase}}Request.URL.Path{{/hasPathParams}}{{^hasPathParams}}AirGenericPath = AirGenericPath(){{/hasPathParams}}, query: {{#hasQueryParams}}{{operationIdCamelCase}}Request.URL.Query{{/hasQueryParams}}{{^hasQueryParams}}AirGenericQuery = AirGenericQuery(){{/hasQueryParams}}) {
        self.path = path
        self.query = query
    }

    public var asAbsoluteStringURL: String { return {{operationIdCamelCase}}Request.Definition.asAbsoluteStringURL(pathParams: self.path.asStringDictionary, queryParams: self.query.asStringDictionary) }
    public var asURL: Foundation.URL { return Foundation.URL(string: self.asAbsoluteStringURL)! } // Note: The URL explicit unwrap is safe here, since all objects are immutable and can't be allocated until the compiler ensures they meet the Swagger Spec
}